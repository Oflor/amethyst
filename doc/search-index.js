var searchIndex = {};
searchIndex['amethyst'] = {"items":[[11,"new","amethyst_engine::app","Creates a new Application with the given initial game state.",0,{"inputs":[{"name":"application"},{"name":"t"}],"output":{"name":"application"}}],[11,"run","","Starts the application and manages the game loop.",0,null],[11,"new","amethyst_engine::state","",1,{"inputs":[{"name":"statemachine"},{"name":"t"}],"output":{"name":"statemachine"}}],[11,"is_running","","Checks whether the state machine is running.",1,{"inputs":[{"name":"statemachine"}],"output":{"name":"bool"}}],[11,"start","","Initializes the state machine.",1,null],[11,"handle_events","","Passes a vector of events to the active state to handle.",1,null],[11,"fixed_update","","Updates the currently active state at a steady, fixed interval.",1,null],[11,"update","","Updates the currently active state immediately.",1,null],[11,"new","amethyst_engine::timing","",2,{"inputs":[{"name":"stopwatch"}],"output":{"name":"stopwatch"}}],[11,"elapsed","","Retrieves the elapsed time.",2,{"inputs":[{"name":"stopwatch"}],"output":{"name":"duration"}}],[11,"restart","","Stops, resets, and starts the stopwatch again.",2,null],[11,"start","","Starts, or resumes, measuring elapsed time. If the stopwatch has been\nstarted and stopped before, the new results are compounded onto the\nexisting elapsed time value.",2,null],[11,"stop","","Stops measuring elapsed time.",2,null],[11,"reset","","Clears the current elapsed time value.",2,null],[3,"Application","amethyst::engine","User-friendly facade for building games. Manages main loop.",null,null],[8,"State","","A trait which defines game states that can be used by the state machine.",null,null],[11,"on_start","","Executed when the game state begins.",3,null],[11,"on_stop","","Executed when the game state exits.",3,null],[11,"on_pause","","Executed when a different game state is pushed onto the stack.",3,null],[11,"on_resume","","Executed when the application returns to this game state once again.",3,null],[11,"handle_events","","Executed on every frame before updating, for use in reacting to events.",3,null],[11,"fixed_update","","Executed repeatedly at stable, predictable intervals (1/60th of a second\nby default).",3,{"inputs":[{"name":"state"},{"name":"duration"}],"output":{"name":"trans"}}],[11,"update","","Executed on every frame immediately, as fast as the engine will allow.",3,{"inputs":[{"name":"state"},{"name":"duration"}],"output":{"name":"trans"}}],[3,"StateMachine","","A simple stack-based state machine (pushdown automaton).",null,null],[4,"Trans","","Types of state transitions.",null,null],[13,"None","","Continue as normal.",4,null],[13,"Pop","","Remove the active state and resume the next state on the stack (if any).",4,null],[13,"Push","","Pause the active state and push a new state onto the stack.",4,null],[13,"Switch","","Remove the current state on the stack and insert a different one.",4,null],[13,"Quit","","Stop and remove all states and shut down the engine.",4,null],[3,"Stopwatch","","Useful utility for accurately measuring elapsed time.",null,null],[11,"weeks","time::duration","Makes a new `Duration` with given number of weeks.\nEquivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",5,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days.\nEquivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",5,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours.\nEquivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",5,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes.\nEquivalent to `Duration::seconds(minutes * 60)` with overflow checks.\nPanics when the duration is out of bounds.",5,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds.\nPanics when the duration is more than `i64::MAX` milliseconds\nor less than `i64::MIN` milliseconds.",5,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",5,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",5,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",5,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",5,{"inputs":[{"name":"duration"},{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",5,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",5,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",5,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",5,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",5,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",5,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration,\nor `None` on overflow (exceeding 2^63 microseconds in either direction).",5,{"inputs":[{"name":"duration"}],"output":{"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration,\nor `None` on overflow (exceeding 2^63 nanoseconds in either direction).",5,{"inputs":[{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",5,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",5,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",5,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",5,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",5,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",5,{"inputs":[{"name":"duration"}],"output":{"name":"bool"}}],[11,"fmt","time","",6,{"inputs":[{"name":"tmfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","time::duration","",5,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",5,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"neg","","",5,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"add","","",5,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",5,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",5,{"inputs":[{"name":"duration"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"div","","",5,{"inputs":[{"name":"duration"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"fmt","","",5,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","time::sys::inner::unix","",7,{"inputs":[{"name":"steadytime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"steadytime"}],"output":{"name":"steadytime"}}],[11,"now","","",7,{"inputs":[{"name":"steadytime"}],"output":{"name":"steadytime"}}],[11,"sub","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"duration"}}],[11,"sub","","",7,{"inputs":[{"name":"steadytime"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"add","","",7,{"inputs":[{"name":"steadytime"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"option"}}],[11,"cmp","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"ordering"}}],[11,"eq","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"hash","time","",8,null],[11,"fmt","","",8,{"inputs":[{"name":"timespec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",8,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"eq","","",8,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"new","","",8,{"inputs":[{"name":"timespec"},{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",8,{"inputs":[{"name":"timespec"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",8,{"inputs":[{"name":"timespec"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",8,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"duration"}}],[11,"clone","","",9,{"inputs":[{"name":"precisetime"}],"output":{"name":"precisetime"}}],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",9,{"inputs":[{"name":"precisetime"}],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of\n`self` to the value of `later`.",9,{"inputs":[{"name":"precisetime"},{"name":"precisetime"}],"output":{"name":"duration"}}],[11,"fmt","","",10,{"inputs":[{"name":"steadytime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"cmp","","",10,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"steadytime"}],"output":{"name":"steadytime"}}],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",10,{"inputs":[{"name":"steadytime"}],"output":{"name":"steadytime"}}],[11,"fmt","","",10,{"inputs":[{"name":"steadytime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","",10,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"duration"}}],[11,"sub","","",10,{"inputs":[{"name":"steadytime"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"add","","",10,{"inputs":[{"name":"steadytime"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"hash","","",11,null],[11,"fmt","","",11,{"inputs":[{"name":"tm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"add","","The resulting Tm is in UTC.",11,{"inputs":[{"name":"tm"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","The resulting Tm is in UTC.",11,{"inputs":[{"name":"tm"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","",11,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"duration"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"option"}}],[11,"cmp","","",11,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"ordering"}}],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",11,{"inputs":[{"name":"tm"}],"output":{"name":"timespec"}}],[11,"to_local","","Convert time to the local timezone",11,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"to_utc","","Convert time to the UTC",11,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC, in the local timezone.",11,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC.",11,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"strftime","","Formats the time according to the format string.",11,{"inputs":[{"name":"tm"},{"name":"str"}],"output":{"name":"result"}}],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",11,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",11,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is\ncompatible with ISO 8601.",11,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"clone","","",12,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",12,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",12,{"inputs":[{"name":"parseerror"}],"output":{"name":"str"}}],[11,"fmt","","",6,{"inputs":[{"name":"tmfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"fmt"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Duration","amethyst::engine","ISO 8601 time duration with nanosecond precision.\nThis also allows for the negative duration; see individual methods for details.",null,null],[3,"SteadyTime","","A structure representing a moment in time.",null,null],[0,"renderer","amethyst","High level rendering engine with multiple backends.",null,null],[3,"Frame","amethyst::renderer","A collection of renderable elements to be drawn by the Frontend.",null,null],[3,"Frontend","","Simple renderer frontend.",null,null],[0,"backend","","Makes low-level graphics API calls and manages memory.",null,null],[8,"Backend","amethyst::renderer::backend","Trait implemented by renderer backends.",null,null],[10,"process","","",14,{"inputs":[{"name":"backend"},{"name":"vec"}],"output":null}],[8,"Resources","","Trait for managing handles to GPU resources.",null,null],[10,"create_buffer","","",15,{"inputs":[{"name":"resources"},{"name":"bufferinfo"}],"output":{"name":"option"}}],[10,"create_shader","","",15,{"inputs":[{"name":"resources"}],"output":{"name":"option"}}],[8,"States","","Trait for managing handles to GPU state objects.",null,null],[10,"create_blend","","",16,{"inputs":[{"name":"states"},{"name":"blendinfo"}],"output":{"name":"option"}}],[10,"create_depth_stencil","","",16,{"inputs":[{"name":"states"},{"name":"depthstencilinfo"}],"output":{"name":"option"}}],[10,"create_pipeline","","",16,{"inputs":[{"name":"states"},{"name":"pipelineinfo"}],"output":{"name":"option"}}],[10,"create_raster","","",16,{"inputs":[{"name":"states"},{"name":"rasterizerinfo"}],"output":{"name":"option"}}],[10,"create_viewport","","",16,{"inputs":[{"name":"states"},{"name":"viewportinfo"}],"output":{"name":"option"}}],[0,"frontend","amethyst::renderer","Builds IR command buffers from Frames and feeds them into the backend.",null,null],[3,"Frontend","amethyst::renderer::frontend","Simple renderer frontend.",null,null],[3,"Frame","","A collection of renderable elements to be drawn by the Frontend.",null,null],[0,"lights","","Types of light sources.",null,null],[3,"Area","amethyst::renderer::frontend::lights","An area light.",null,null],[3,"Directional","","A directional light.",null,null],[12,"color","","",17,null],[12,"direction","","",17,null],[12,"intensity","","",17,null],[3,"Point","","A point light.",null,null],[12,"color","","",18,null],[12,"intensity","","",18,null],[12,"location","","",18,null],[3,"Spot","","A spot light.",null,null],[12,"angle","","",19,null],[12,"color","","",19,null],[12,"direction","","",19,null],[12,"intensity","","",19,null],[12,"location","","",19,null],[0,"objects","amethyst::renderer::frontend","Types of physical objects.",null,null],[3,"Emitter","amethyst::renderer::frontend::objects","A particle emitter.",null,null],[3,"Mesh","","A polygon mesh.",null,null],[12,"indices","","",20,null],[12,"vertices","","",20,null],[3,"Sprite","","A 2D sprite.",null,null],[11,"new","","",20,{"inputs":[{"name":"mesh"},{"name":"buffer"}],"output":{"name":"mesh"}}],[11,"new_indexed","","",20,{"inputs":[{"name":"mesh"},{"name":"buffer"},{"name":"buffer"}],"output":{"name":"mesh"}}],[11,"to_cmdbuf","","",20,{"inputs":[{"name":"mesh"}],"output":{"name":"commandbuffer"}}],[11,"new","amethyst::renderer","",21,{"inputs":[{"name":"frame"}],"output":{"name":"frame"}}],[11,"push","","",21,{"inputs":[{"name":"frame"},{"name":"t"}],"output":null}],[11,"peer_into","","",21,{"inputs":[{"name":"frame"}],"output":{"name":"vec"}}],[11,"new","","",22,{"inputs":[{"name":"frontend"},{"name":"t"}],"output":{"name":"frontend"}}],[11,"load_render_path","","",22,{"inputs":[{"name":"frontend"}],"output":null}],[11,"draw","","Draws a frame with the currently set render path. TODO: Build actual\nmodular, parallelized Object translators.",22,{"inputs":[{"name":"frontend"},{"name":"frame"}],"output":null}],[8,"Renderable","amethyst::renderer::frontend","A trait that describes a renderable Frame element.",null,null],[10,"to_cmdbuf","","",23,{"inputs":[{"name":"renderable"}],"output":{"name":"commandbuffer"}}],[0,"ir","amethyst::renderer","Platform-agnostic intermediate representation used by the frontend and\nbackend to communicate.",null,null],[3,"CommandBuffer","amethyst::renderer::ir","A collection of Commands.",null,null],[3,"CommandEncoder","","Builds new CommandBuffers.",null,null],[3,"CommandQueue","","Queues and sorts CommandBuffers to minimize redundant state changes.",null,null],[4,"Command","","Serialized graphics command.",null,null],[13,"Clear","","",24,null],[13,"Draw","","",24,null],[13,"DrawIndexed","","",24,null],[13,"SetBuffer","","",24,null],[13,"SetDynamicState","","",24,null],[13,"SetPipeline","","",24,null],[0,"state_dynamic","","Structures representing dynamic GPU pipeline state.",null,null],[3,"BlendInfo","amethyst::renderer::ir::state_dynamic","",null,null],[12,"blend_constants","","",25,null],[12,"targets","","",25,null],[3,"DepthStencilInfo","","",null,null],[12,"depth_func","","",26,null],[12,"depth_enabled","","",26,null],[12,"depth_write_enabled","","",26,null],[12,"depth_bounds_enabled","","",26,null],[12,"max_depth","","",26,null],[12,"min_depth","","",26,null],[12,"stencil_enabled","","",26,null],[12,"stencil_read_mask","","",26,null],[12,"stencil_write_mask","","",26,null],[12,"back","","",26,null],[12,"front","","",26,null],[3,"RasterizerInfo","","",null,null],[12,"cull_mode","","",27,null],[12,"depth_bias","","",27,null],[12,"depth_bias_slope_scaled","","",27,null],[12,"depth_bias_clamp","","",27,null],[12,"fill_mode","","",27,null],[12,"winding_order","","",27,null],[3,"TargetBlendInfo","","",null,null],[12,"blending_enabled","","",28,null],[12,"alpha_func","","",28,null],[12,"color_func","","",28,null],[12,"dest_alpha","","",28,null],[12,"dest_color","","",28,null],[12,"source_alpha","","",28,null],[12,"source_color","","",28,null],[3,"ViewportInfo","","",null,null],[12,"scissor_test_enabled","","",29,null],[12,"scissors","","",29,null],[12,"viewports","","",29,null],[4,"DynamicState","","Handle to a dynamic state object.",null,null],[13,"Blend","","Color blend state.",30,null],[13,"DepthStencil","","Depth stencil state.",30,null],[13,"Rasterizer","","Rasterizer state.",30,null],[13,"Viewport","","Viewport state.",30,null],[11,"eq","","",30,{"inputs":[{"name":"dynamicstate"},{"name":"dynamicstate"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"dynamicstate"},{"name":"dynamicstate"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"dynamicstate"}],"output":{"name":"dynamicstate"}}],[0,"state_static","amethyst::renderer::ir","Structures representing static GPU pipeline state.",null,null],[3,"BlenderInfo","amethyst::renderer::ir::state_static","",null,null],[12,"alpha_to_coverage_enabled","","",31,null],[12,"dual_source_enabled","","",31,null],[12,"blend_operation","","",31,null],[12,"targets","","",31,null],[3,"DepthStencilTesterInfo","","",null,null],[12,"format_channel","","",32,null],[12,"format_numeric","","",32,null],[3,"InputAssemblerInfo","","",null,null],[12,"vertex_reuse_enabled","","",33,null],[12,"primitive_used","","",33,null],[3,"RasterizerInfo","","",null,null],[12,"depth_clip_enabled","","",34,null],[3,"TargetInfo","","",null,null],[12,"blending_enabled","","",35,null],[12,"channel_write_mask","","",35,null],[12,"format_channel","","",35,null],[12,"format_numeric","","",35,null],[3,"PipelineInfo","","",null,null],[12,"color_blender","","",36,null],[12,"depth_stencil","","",36,null],[12,"input_assembler","","",36,null],[12,"rasterizer","","",36,null],[12,"shaders","","",36,null],[3,"Pipeline","","Handle to a pipeline state object.",null,null],[11,"partial_cmp","","",37,{"inputs":[{"name":"pipeline"},{"name":"pipeline"}],"output":{"name":"option"}}],[11,"lt","","",37,{"inputs":[{"name":"pipeline"},{"name":"pipeline"}],"output":{"name":"bool"}}],[11,"le","","",37,{"inputs":[{"name":"pipeline"},{"name":"pipeline"}],"output":{"name":"bool"}}],[11,"gt","","",37,{"inputs":[{"name":"pipeline"},{"name":"pipeline"}],"output":{"name":"bool"}}],[11,"ge","","",37,{"inputs":[{"name":"pipeline"},{"name":"pipeline"}],"output":{"name":"bool"}}],[11,"eq","","",37,{"inputs":[{"name":"pipeline"},{"name":"pipeline"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"pipeline"},{"name":"pipeline"}],"output":{"name":"bool"}}],[11,"cmp","","",37,{"inputs":[{"name":"pipeline"},{"name":"pipeline"}],"output":{"name":"ordering"}}],[11,"clone","","",37,{"inputs":[{"name":"pipeline"}],"output":{"name":"pipeline"}}],[11,"clone","amethyst::renderer::ir","",24,{"inputs":[{"name":"command"}],"output":{"name":"command"}}],[11,"new","","",38,{"inputs":[{"name":"commandbuffer"},{"name":"vec"},{"name":"sortkey"}],"output":{"name":"commandbuffer"}}],[11,"unpack","","",38,{"inputs":[{"name":"commandbuffer"}],"output":{"name":"vec"}}],[11,"cmp","","",38,{"inputs":[{"name":"commandbuffer"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"eq","","",38,{"inputs":[{"name":"commandbuffer"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",38,{"inputs":[{"name":"commandbuffer"},{"name":"self"}],"output":{"name":"option"}}],[11,"new","","",39,{"inputs":[{"name":"commandencoder"}],"output":{"name":"commandencoder"}}],[11,"finish","","Signals that the encoder has finished recording.",39,{"inputs":[{"name":"commandencoder"}],"output":{"name":"commandbuffer"}}],[11,"clear","","Clears the specified buffer to a value.",39,null],[11,"draw","","Draws non-indexed, non-instanced primitives.",39,{"inputs":[{"name":"commandencoder"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"draw_indexed","","Draws indexed, non-instanced primitives.",39,{"inputs":[{"name":"commandencoder"},{"name":"u32"},{"name":"u32"},{"name":"usize"}],"output":{"name":"self"}}],[11,"set_buffer","","Binds a vertex/index/constant buffer to pull data from.",39,{"inputs":[{"name":"commandencoder"},{"name":"buffer"}],"output":{"name":"self"}}],[11,"set_dynamic_state","","Binds dynamic state (blend, depth-stencil, rasterizer, or viewport).",39,{"inputs":[{"name":"commandencoder"},{"name":"dynamicstate"}],"output":{"name":"self"}}],[11,"set_pipeline","","Binds a static pipeline state object to use when drawing.",39,{"inputs":[{"name":"commandencoder"},{"name":"pipeline"}],"output":{"name":"self"}}],[11,"new","","",40,{"inputs":[{"name":"commandqueue"}],"output":{"name":"commandqueue"}}],[11,"submit","","Enqueues a finished CommandBuffer.",40,{"inputs":[{"name":"commandqueue"},{"name":"commandbuffer"}],"output":null}],[11,"sort_and_flush","","Sorts the queue and returns the result, ready for processing by the\nbackend.",40,{"inputs":[{"name":"commandqueue"}],"output":{"name":"vec"}}],[0,"types","amethyst::renderer","Special types for representing cross-API GPU data.",null,null],[3,"BufferInfo","amethyst::renderer::types","",null,null],[12,"size","","Size in bytes.",41,null],[3,"DepthStencilOp","","",null,null],[12,"depth_fail","","",42,null],[12,"fail","","",42,null],[12,"pass","","",42,null],[12,"stencil_func","","",42,null],[12,"reference_value","","",42,null],[3,"ScissorBox","","",null,null],[12,"origin","","",43,null],[12,"size","","",43,null],[3,"ShaderSet","","",null,null],[12,"fragment","","",44,null],[12,"geometry","","",44,null],[12,"vertex","","",44,null],[3,"Viewport","","",null,null],[12,"origin","","",45,null],[12,"size","","",45,null],[12,"min_depth","","",45,null],[12,"max_depth","","",45,null],[4,"Buffer","","",null,null],[13,"Index","","",46,null],[13,"Uniform","","",46,null],[13,"Vertex","","",46,null],[4,"Shader","","",null,null],[13,"Compute","","",47,null],[13,"Fragment","","",47,null],[13,"Geometry","","",47,null],[13,"Vertex","","",47,null],[4,"Blend","","",null,null],[13,"One","","",48,null],[13,"OneMinusConstAlpha","","",48,null],[13,"OneMinusConstColor","","",48,null],[13,"OneMinusDestAlpha","","",48,null],[13,"OneMinusDestColor","","",48,null],[13,"OneMinusSourceAlpha","","",48,null],[13,"OneMinusSourceColor","","",48,null],[13,"ConstantAlpha","","",48,null],[13,"ConstantColor","","",48,null],[13,"DestAlpha","","",48,null],[13,"DestColor","","",48,null],[13,"SourceAlpha","","",48,null],[13,"SourceAlphaSaturate","","",48,null],[13,"SourceColor","","",48,null],[13,"Zero","","",48,null],[4,"BlendFunc","","",null,null],[13,"Add","","",49,null],[13,"Max","","",49,null],[13,"Min","","",49,null],[13,"ReverseSub","","",49,null],[13,"Sub","","",49,null],[4,"ClearMask","","",null,null],[13,"Color","","",50,null],[13,"Depth","","",50,null],[13,"Stencil","","",50,null],[4,"CompareFunc","","",null,null],[13,"Always","","",51,null],[13,"Equal","","",51,null],[13,"Greater","","",51,null],[13,"GreaterEqual","","",51,null],[13,"Less","","",51,null],[13,"LessEqual","","",51,null],[13,"Never","","",51,null],[13,"NotEqual","","",51,null],[4,"CullMode","","",null,null],[13,"None","","",52,null],[13,"Back","","",52,null],[13,"Front","","",52,null],[4,"FillMode","","",null,null],[13,"Solid","","",53,null],[13,"Wireframe","","",53,null],[4,"LogicOp","","",null,null],[13,"And","","",54,null],[13,"AndReverse","","",54,null],[13,"AndInverted","","",54,null],[13,"Copy","","",54,null],[13,"CopyInverted","","",54,null],[13,"Clear","","",54,null],[13,"Equiv","","",54,null],[13,"Invert","","",54,null],[13,"Nand","","",54,null],[13,"NoOp","","",54,null],[13,"Nor","","",54,null],[13,"Or","","",54,null],[13,"OrInverted","","",54,null],[13,"OrReverse","","",54,null],[13,"Set","","",54,null],[13,"Xor","","",54,null],[4,"Primitive","","",null,null],[13,"Points","","",55,null],[13,"Lines","","",55,null],[13,"LineStrip","","",55,null],[13,"Triangles","","",55,null],[13,"TriangleStrip","","",55,null],[13,"TriangleFan","","",55,null],[13,"Quads","","",55,null],[4,"StencilOp","","",null,null],[13,"DecrementClamp","","",56,null],[13,"DecrementWrap","","",56,null],[13,"IncrementClamp","","",56,null],[13,"IncrementWrap","","",56,null],[13,"Invert","","",56,null],[13,"Keep","","",56,null],[13,"Replace","","",56,null],[13,"Zero","","",56,null],[4,"Target","","",null,null],[13,"DepthStencil","","",57,null],[13,"Render","","",57,null],[4,"Winding","","",null,null],[13,"CW","","",58,null],[13,"CCW","","",58,null],[11,"clone","","",46,{"inputs":[{"name":"buffer"}],"output":{"name":"buffer"}}],[11,"clone","","",47,{"inputs":[{"name":"shader"}],"output":{"name":"shader"}}],[11,"clone","","",50,{"inputs":[{"name":"clearmask"}],"output":{"name":"clearmask"}}]],"paths":[[3,"Application"],[3,"StateMachine"],[3,"Stopwatch"],[8,"State"],[4,"Trans"],[3,"Duration"],[3,"TmFmt"],[3,"SteadyTime"],[3,"Timespec"],[3,"PreciseTime"],[3,"SteadyTime"],[3,"Tm"],[4,"ParseError"],[4,"Fmt"],[8,"Backend"],[8,"Resources"],[8,"States"],[3,"Directional"],[3,"Point"],[3,"Spot"],[3,"Mesh"],[3,"Frame"],[3,"Frontend"],[8,"Renderable"],[4,"Command"],[3,"BlendInfo"],[3,"DepthStencilInfo"],[3,"RasterizerInfo"],[3,"TargetBlendInfo"],[3,"ViewportInfo"],[4,"DynamicState"],[3,"BlenderInfo"],[3,"DepthStencilTesterInfo"],[3,"InputAssemblerInfo"],[3,"RasterizerInfo"],[3,"TargetInfo"],[3,"PipelineInfo"],[3,"Pipeline"],[3,"CommandBuffer"],[3,"CommandEncoder"],[3,"CommandQueue"],[3,"BufferInfo"],[3,"DepthStencilOp"],[3,"ScissorBox"],[3,"ShaderSet"],[3,"Viewport"],[4,"Buffer"],[4,"Shader"],[4,"Blend"],[4,"BlendFunc"],[4,"ClearMask"],[4,"CompareFunc"],[4,"CullMode"],[4,"FillMode"],[4,"LogicOp"],[4,"Primitive"],[4,"StencilOp"],[4,"Target"],[4,"Winding"]]};
initSearch(searchIndex);
